  - name: atd.2.16.0
    source: https://github.com/ahrefs/atd
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Parser for the ATD data format description language
    description: >
      ATD is the OCaml library providing a parser for the ATD language and variousutilities. ATD stands for Adjustable Type Definitions in reference to its mainproperty of supporting annotations that allow a good fit with a variety of dataformats. This package also provides the 'apos;atdcat'apos; and 'apos;atddiff'apos; command-lineutilities.
    lifecycle: dependency
  - name: atdgen-runtime.2.16.0
    source: https://github.com/ahrefs/atd
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Runtime library for code generated by atdgen
    description: >
      This package should be used only in conjunction with the atdgen codegenerator
    lifecycle: dependency
  - name: atdgen.2.15.0
    source: https://github.com/ahrefs/atd
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Generates efficient JSON serializers, deserializers and validators
    description: >
      Atdgen is a command-line program that takes as input type definitions in the ATDsyntax and produces OCaml code suitable for data serialization anddeserialization.Two data formats are currently supported, these are biniou and JSON.Atdgen-biniou and Atdgen-json will refer to Atdgen used in one context or theother.Atdgen was designed with efficiency and durability in mind. Software authors areencouraged to use Atdgen directly and to write tools that may reuse part ofAtdgenâ€™s source code.
    lifecycle: dependency
  - name: atdts.2.16.0
    source: https://github.com/ahrefs/atd
    license: https://spdx.org/licenses/MIT.html
    synopsis:  TypeScript code generation for ATD APIs
    description: >
      TypeScript code generation for ATD APIs
    lifecycle: dependency
  - name: base-bigarray.base
    source: /rocq-prover/platform/blob/2025.01.0/doc
    license: Unknown
    synopsis: No synopsis available
    description: >
      Bigarray library distributed with the OCaml compiler
    lifecycle: dependency
  - name: base-threads.base
    source: /rocq-prover/platform/blob/2025.01.0/doc
    license: Unknown
    synopsis: No synopsis available
    description: >
      Threads library distributed with the OCaml compiler
    lifecycle: dependency
  - name: base-unix.base
    source: /rocq-prover/platform/blob/2025.01.0/doc
    license: Unknown
    synopsis: No synopsis available
    description: >
      Unix library distributed with the OCaml compiler
    lifecycle: dependency
  - name: base.v0.16.3
    source: https://github.com/janestreet/base
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Full standard library replacement for OCaml
    description: >
      Full standard library replacement for OCamlBase is a complete and portable alternative to the OCaml standardlibrary. It provides all standard functionalities one would expectfrom a language standard library. It uses consistent conventionsacross all of its module.Base aims to be usable in any context. As a result system dependentfeatures such as I/O are not offered by Base. They are insteadprovided by companion libraries such as stdio:  https://github.com/janestreet/stdio
    lifecycle: dependency
  - name: biniou.1.2.2
    source: https://github.com/mjambon/biniou
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  Binary data format designed for speed, safety, ease of use and backward compatibility as protocols evolve
    description: >
      Biniou (pronounced \be new\) is a binary data format designed for speed, safety,ease of use and backward compatibility as protocols evolve. Biniou is vastlyequivalent to JSON in terms of functionality but allows implementations severaltimes faster (4 times faster than yojson), with 25-35% space savings.Biniou data can be decoded into human-readable form without knowledge of typedefinitions except for field and variant names which are represented by 31-bithashes. A program named bdump is provided for routine visualization of binioudata files.The program atdgen is used to derive OCaml-Biniou serializers and deserializersfrom type definitions.Biniou format specification: mjambon.github.io/atdgen-doc/biniou-format.txt
    lifecycle: dependency
  - name: cairo2.0.6.5
    source: https://github.com/Chris00/ocaml-cairo
    license: https://spdx.org/licenses/LGPL-3.0-or-later.html
    synopsis:  Binding to Cairo, a 2D Vector Graphics Library
    description: >
      This is a binding to Cairo, a 2D graphics library with support formultiple output devices. Currently supported output targets includethe X Window System, Quartz, Win32, image buffers, PostScript, PDF,and SVG file output.
    lifecycle: dependency
  - name: camlp-streams.5.0.1
    source: https://github.com/ocaml/camlp-streams
    license: Unknown
    synopsis:  The Stream and Genlex libraries for use with Camlp4 and Camlp5
    description: >
      This package provides two library modules:- Stream: imperative streams, with in-place update and memoization  of the latest element produced.- Genlex: a small parameterized lexical analyzer producing streams  of tokens from streams of characters.The two modules are designed for use with Camlp4 and Camlp5:- The stream patterns and stream expressions of Camlp4/Camlp5 consume  and produce data of type 'apos;a Stream.t.- The Genlex tokenizer can be used as a simple lexical analyzer for  Camlp4/Camlp5-generated parsers.The Stream module can also be used by hand-written recursive-descentparsers, but is not very convenient for this purpose.The Stream and Genlex modules have been part of the OCaml standard libraryfor a long time, and have been distributed as part of the core OCaml system.They will be removed from the OCaml standard library at some future point,but will be maintained and distributed separately in this camlpstreams package.
    lifecycle: dependency
  - name: cmdliner.1.3.0
    source: https://erratique.ch/software/cmdliner" rel="nofollow
    license: https://spdx.org/licenses/ISC.html
    synopsis:  Declarative definition of command line interfaces for OCaml
    description: >
      Cmdliner allows the declarative definition of command line interfacesfor OCaml.It provides a simple and compositional mechanism to convert commandline arguments to OCaml values and pass them to your functions. Themodule automatically handles syntax errors, help messages and UNIX manpage generation. It supports programs with single or multiple commandsand respects most of the [POSIX][1] and [GNU][2] conventions.Cmdliner has no dependencies and is distributed under the ISC license.[1]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html[2]: http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.htmlHome page: http://erratique.ch/software/cmdliner
    lifecycle: dependency
  - name: adwaita-icon-theme.2
    source: https://github.com/GNOME/adwaita-icon-theme
    license: https://spdx.org/licenses/LGPL-3.0-only.html
    synopsis:  Virtual package relying on adwaita-icon-theme
    description: >
      This package can only install if the adwaita-icon-theme package is installed on the system.
    lifecycle: dependency
  - name: autoconf.0.2
    source: http://www.gnu.org/software/autoconf" rel="nofollow
    license: https://spdx.org/licenses/GPL-3.0-only.html
    synopsis:  Virtual package relying on autoconf installation
    description: >
      This package can only install if the autoconf commandis available on the system.
    lifecycle: dependency
  - name: automake.1
    source: https://www.gnu.org/software/automake" rel="nofollow
    license: https://spdx.org/licenses/GPL-2.0-or-later.html
    synopsis:  Virtual package relying on GNU automake
    description: >
      This package can only install if GNU automake is installed on the system.
    lifecycle: dependency
  - name: bash.1
    source: https://www.gnu.org/software/bash/" rel="nofollow
    license: https://spdx.org/licenses/GPL-3.0-or-later.html
    synopsis:  Virtual package to install the Bash shell
    description: >
      This package will install a system bash
    lifecycle: dependency
  - name: bison.2
    source: https://www.gnu.org/software/bison/" rel="nofollow
    license: https://spdx.org/licenses/GPL-3.0-or-later.html
    synopsis:  Virtual package relying on GNU bison
    description: >
      This package can only install if GNU bison is installed on the system.
    lifecycle: dependency
  - name: boost.1
    source: http://www.boost.org" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Virtual package relying on boost
    description: >
      This package can only install if the boost library is installed on the system.
    lifecycle: dependency
  - name: c++.1.0
    source: https://github.com/ocaml/opam-repository
    license: https://spdx.org/licenses/GPL-2.0-or-later.html
    synopsis:  Virtual package relying on the c++ compiler
    description: >
      This package can only install if the c++ compiler is installed on the system.
    lifecycle: dependency
  - name: cairo.1
    source: http://cairographics.org/" rel="nofollow
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  Virtual package relying on a Cairo system installation
    description: >
      This package can only install if the cairo lib is installed on the system.
    lifecycle: dependency
  - name: findutils.1
    source: https://www.gnu.org/software/findutils/" rel="nofollow
    license: https://spdx.org/licenses/GPL-3.0-or-later.html
    synopsis:  Virtual package relying on findutils
    description: >
      This package can only install if the findutils binary is installed on the system.
    lifecycle: dependency
  - name: flex.2
    source: https://github.com/westes/flex
    license: https://github.com/westes/flex/blob/master/COPYING
    synopsis:  Virtual package relying on GNU flex
    description: >
      This package can only install if GNU flex is installed on the system.
    lifecycle: dependency
  - name: g++.1.0
    source: https://github.com/ocaml/opam-repository
    license: https://spdx.org/licenses/GPL-2.0-or-later.html
    synopsis:  Virtual package relying on the g++ compiler (for C++)
    description: >
      This package can only install if the g++ compiler is installed on the system.
    lifecycle: dependency
  - name: gcc.1.0
    source: https://github.com/ocaml/opam-repository
    license: https://spdx.org/licenses/GPL-2.0-or-later.html
    synopsis:  Virtual package relying on the gcc compiler (for C)
    description: >
      This package can only install if the gcc compiler is installed on the system.
    lifecycle: dependency
  - name: gmp.4
    source: http://gmplib.org/" rel="nofollow
    license: https://spdx.org/licenses/GPL-1.0-or-later.html
    synopsis:  Virtual package relying on a GMP lib system installation
    description: >
      This package can only install if the GMP lib is installed on the system.
    lifecycle: dependency
  - name: gtk3.18
    source: https://developer.gnome.org/" rel="nofollow
    license: Unknown
    synopsis:  Virtual package relying on GTK+ 3
    description: >
      This package can only install if GTK+ 3 is installed on the system.
    lifecycle: dependency
  - name: gtksourceview3.0+2
    source: https://projects.gnome.org/gtksourceview/" rel="nofollow
    license: https://spdx.org/licenses/LGPL-2.1-or-later.html
    synopsis:  Virtual package relying on a GtkSourceView-3 system installation
    description: >
      This package can only install if libgtksourceview-3.0-dev is installed on the system.
    lifecycle: dependency
  - name: libtool.1
    source: http://www.gnu.org/software/libtool" rel="nofollow
    license: https://spdx.org/licenses/GPL-3.0-only.html
    synopsis:  Virtual package relying on libtool installation
    description: >
      This package can only install if the libtool commandis available on the system.
    lifecycle: dependency
  - name: mpfr.3
    source: http://www.mpfr.org/" rel="nofollow
    license: https://spdx.org/licenses/LGPL-2.0-or-later.html
    synopsis:  Virtual package relying on library MPFR installation
    description: >
      This package can only install if the MPFR library is installed on the system.
    lifecycle: dependency
  - name: pkg-config.4
    source: http://www.freedesktop.org/wiki/Software/pkg-config/" rel="nofollow
    license: https://spdx.org/licenses/GPL-1.0-or-later.html
    synopsis:  Check if pkg-config is installed and create an opam switch local pkgconfig folder
    description: >
      This package can only install if the pkg-config package is installedon the system.
    lifecycle: dependency
  - name: python-3.9.0.0
    source: https://www.python.org/downloads/release/python-3910/" rel="nofollow
    license: Unknown
    synopsis:  Virtual package relying on Python-3 installation
    description: >
      This package can only install if a Python-3 interpreter is availableon the system.If a minor version needs to be specified for your operating system, thenpython-3.9 will be used.
    lifecycle: dependency
  - name: coq-core.8.20.1
    source: https://rocq-prover.org" rel="nofollow
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  The Coq Proof Assistant -- Core Binaries and Tools
    description: >
      Coq is a formal proof management system. It providesa formal language to write mathematical definitions, executablealgorithms and theorems together with an environment forsemi-interactive development of machine-checked proofs.Typical applications include the certification of properties ofprogramming languages (e.g. the CompCert compiler certificationproject, or the Bedrock verified low-level programming library), theformalization of mathematics (e.g. the full formalization of theFeit-Thompson theorem or homotopy type theory) and teaching.This package includes the Coq core binaries, plugins, and tools, butnot the vernacular standard library.Note that in this setup, Coq needs to be started with the -boot and-noinit options, as will otherwise fail to find the regular Coqprelude, now living in the coq-stdlib package.
    lifecycle: dependency
  - name: coq-mathcomp-classical.1.8.0
    source: https://github.com/math-comp/analysis
    license: https://spdx.org/licenses/CECILL-C.html
    synopsis:  A library for classical logic for mathematical components
    description: >
      This repository contains a library for classical logic forthe Coq proof-assistant and using the Mathematical Components library.
    lifecycle: dependency
  - name: coq-mathcomp-reals.1.8.0
    source: https://github.com/math-comp/analysis
    license: https://spdx.org/licenses/CECILL-C.html
    synopsis:  A library for real numbers for mathematical components
    description: >
      This package contains a library for real numbers forthe Coq proof-assistant and using the Mathematical Components library.
    lifecycle: dependency
  - name: coq-metacoq-common.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  The common library of Template Coq and PCUIC
    description: >
      MetaCoq is a meta-programming framework for Coq.
    lifecycle: dependency
  - name: coq-metacoq-erasure-plugin.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Implementation and verification of an erasure procedure for Coq
    description: >
      MetaCoq is a meta-programming framework for Coq.The Erasure module provides a complete specification of Coq'apos;s so-called\extraction\ procedure, starting from the PCUIC calculus and targetinguntyped call-by-value lambda-calculus.The `erasure` function translates types and proofs in well-typed termsinto a dummy `tBox` constructor, following closely P. Letouzey'apos;s PhDthesis.
    lifecycle: dependency
  - name: coq-metacoq-erasure.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Implementation and verification of an erasure procedure for Coq
    description: >
      MetaCoq is a meta-programming framework for Coq.The Erasure module provides a complete specification of Coq'apos;s so-called\extraction\ procedure, starting from the PCUIC calculus and targetinguntyped call-by-value lambda-calculus.The `erasure` function translates types and proofs in well-typed termsinto a dummy `tBox` constructor, following closely P. Letouzey'apos;s PhDthesis.
    lifecycle: dependency
  - name: coq-metacoq-pcuic.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A type system equivalent to Coq'apos;s and its metatheory
    description: >
      MetaCoq is a meta-programming framework for Coq.The PCUIC module provides a cleaned-up specification of Coq'apos;s typing algorithm alongwith a certified typechecker for it. This module includes the standard metatheory ofPCUIC: Weakening, Substitution, Confluence and Subject Reduction are proven here.
    lifecycle: dependency
  - name: coq-metacoq-quotation.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Gallina quotation functions for Template Coq
    description: >
      MetaCoq is a meta-programming framework for Coq.The Quotation module is geared at providing functions `â–¡T â†’ â–¡â–¡T` for`â–¡T := Ast.term` (currently implemented) and for `â–¡T := { t : Ast.term&amp; Î£ ;;; [] |- t : T }` (still in the works).  Currently `Ast.term â†’Ast.term` and `(Î£ ;;; [] |- t : T) â†’ Ast.term` functions are providedfor Template and PCUIC terms, in `MetaCoq.Quotation.ToTemplate.All`and `MetaCoq.Quotation.ToPCUIC.All`.  Proving well-typedness is stilla work in progress.Ultimately the goal of this development is to prove that `â–¡` is a lax monoidalsemicomonad (a functor with `cojoin : â–¡T â†’ â–¡â–¡T` that codistributes over `unit`and `Ã—`), which is sufficient for proving LÃ¶b'apos;s theorem.
    lifecycle: dependency
  - name: coq-metacoq-safechecker-plugin.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Implementation and verification of an erasure procedure for Coq
    description: >
      MetaCoq is a meta-programming framework for Coq.The Erasure module provides a complete specification of Coq'apos;s so-called\extraction\ procedure, starting from the PCUIC calculus and targetinguntyped call-by-value lambda-calculus.The `erasure` function translates types and proofs in well-typed termsinto a dummy `tBox` constructor, following closely P. Letouzey'apos;s PhDthesis.
    lifecycle: dependency
  - name: coq-metacoq-safechecker.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Implementation and verification of safe conversion and typechecking algorithms for Coq
    description: >
      MetaCoq is a meta-programming framework for Coq.The SafeChecker modules provides a correct implementation ofweak-head reduction, conversion and typechecking of Coq definitions and global environments.
    lifecycle: dependency
  - name: coq-metacoq-template-pcuic.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Translations between Template Coq and PCUIC and proofs of correctness
    description: >
      
    lifecycle: dependency
  - name: coq-metacoq-template.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A quoting and unquoting library for Coq in Coq
    description: >
      MetaCoq is a meta-programming framework for Coq.Template Coq is a quoting library for Coq. It takes Coq terms andconstructs a representation of their syntax tree as a Coq inductive datatype. The representation is based on the kernel'apos;s term representation.In addition to a complete reification and denotation of CIC terms,Template Coq includes:- Reification of the environment structures, for constant and inductive declarations.- Denotation of terms and global declarations- A monad for manipulating global declarations, calling the type  checker, and inserting them in the global environment, in the style of  MetaCoq/MTac.
    lifecycle: dependency
  - name: coq-metacoq-translations.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Translations built on top of MetaCoq
    description: >
      MetaCoq is a meta-programming framework for Coq.The Translations modules provides implementation of standard translationsfrom type theory to type theory, e.g. parametricity and the `cross-bool`translation that invalidates functional extensionality.
    lifecycle: dependency
  - name: coq-metacoq-utils.1.3.2+8.20
    source: https://metacoq.github.io/metacoq" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  The utility library of Template Coq and PCUIC
    description: >
      MetaCoq is a meta-programming framework for Coq.
    lifecycle: dependency
  - name: coq-stdlib.8.20.1
    source: https://rocq-prover.org/" rel="nofollow
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  The Coq Proof Assistant -- Standard Library
    description: >
      Coq is a formal proof management system. It providesa formal language to write mathematical definitions, executablealgorithms and theorems together with an environment forsemi-interactive development of machine-checked proofs.Typical applications include the certification of properties ofprogramming languages (e.g. the CompCert compiler certificationproject, or the Bedrock verified low-level programming library), theformalization of mathematics (e.g. the full formalization of theFeit-Thompson theorem or homotopy type theory) and teaching.This package includes the Coq Standard Library, that is to say, theset of modules usually bound to the Coq.* namespace.
    lifecycle: dependency
  - name: coq-vst-zlist.2.13
    source: http://vst.cs.princeton.edu/" rel="nofollow
    license: https://spdx.org/licenses/BSD-2-Clause.html
    synopsis:  A list library indexed by Z type, with a powerful automatic solver
    description: >
      
    lifecycle: dependency
  - name: coqide-server.8.20.1
    source: https://rocq-prover.org/" rel="nofollow
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  The Coq Proof Assistant, XML protocol server
    description: >
      Coq is a formal proof management system. It provides a formal language to write mathematical definitions, executable algorithms and theorems together with an environment for semi-interactive development of machine-checked proofs. This package provides the `coqidetop` language server, an implementation of Coq's [XML protocol](https://github.com/rocq-prover/rocq/blob/master/dev/doc/xml-protocol.md) which allows clients, such as CoqIDE, to interact with Coq in a structured way.
    lifecycle: dependency
  - name: cppo.1.8.0
    source: https://github.com/ocaml-community/cppo
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  Code preprocessor like cpp for OCaml
    description: >
      Cppo is an equivalent of the C preprocessor for OCaml programs.It allows the definition of simple macros and file inclusion.Cppo is:* more OCaml-friendly than cpp* easy to learn without consulting a manual* reasonably fast* simple to install and to maintain
    lifecycle: dependency
  - name: csexp.1.5.2
    source: https://github.com/ocaml-dune/csexp
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Parsing and printing of S-expressions in Canonical form
    description: >
      This library provides minimal support for Canonical S-expressions[1]. Canonical S-expressions are a binary encoding of S-expressionsthat is super simple and well suited for communication betweenprograms.This library only provides a few helpers for simple applications. Ifyou need more advanced support, such as parsing from more fancy inputsources, you should consider copying the code of this library givenhow simple parsing S-expressions in canonical form is.To avoid a dependency on a particular S-expression library, the onlymodule of this library is parameterised by the type of S-expressions.[1] https://en.wikipedia.org/wiki/Canonical_S-expressions
    lifecycle: dependency
  - name: easy-format.1.3.4
    source: https://github.com/ocaml-community/easy-format
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  High-level and functional interface to the Format module of the OCaml standard library
    description: >
      This module offers a high-level and functional interface to the Format module ofthe OCaml standard library. It is a pretty-printing facility, i.e. it takes asinput some code represented as a tree and formats this code into the mostvisually satisfying result, breaking and indenting lines of code whereappropriate.Input data must be first modelled and converted into a tree using 3 kinds ofnodes:* atoms* lists* labelled nodesAtoms represent any text that is guaranteed to be printed as-is. Lists can modelany sequence of items such as arrays of data or lists of definitions that arelabelled with something like \int main\, \let x =\ or \x:\.
    lifecycle: dependency
  - name: elpi.2.0.6
    source: https://github.com/LPCIC/elpi
    license: https://spdx.org/licenses/LGPL-2.1-or-later.html
    synopsis:  ELPI - Embeddable Î»Prolog Interpreter
    description: >
      ELPI implements a variant of Î»Prolog enriched with Constraint Handling Rules,a programming language well suited to manipulate syntax trees with binders.ELPI is designed to be embedded into larger applications written in OCaml asan extension language. It comes with an API to drive the interpreter and with an FFI for defining built-in predicates and data types, as well asquotations and similar goodies that are handy to adapt the language to the hostapplication.This package provides both a command line interpreter (elpi) and a library tobe linked in other applications (eg by passing -package elpi to ocamlfind).The ELPI programming language has the following features:- Native support for variable binding and substitution, via an Higher Order  Abstract Syntax (HOAS) embedding of the object language. The programmer  does not need to care about technical devices to handle bound variables,  like De Bruijn indices.- Native support for hypothetical context. When moving under a binder one can  attach to the bound variable extra information that is collected when the  variable gets out of scope. For example when writing a type-checker the  programmer needs not to care about managing the typing context.- Native support for higher order unification variables, again via HOAS.  Unification variables of the meta-language (Î»Prolog) can be reused to  represent the unification variables of the object language. The programmer  does not need to care about the unification-variable assignment map and  cannot assign to a unification variable a term containing variables out of  scope, or build a circular assignment.- Native support for syntactic constraints and their meta-level handling rules.  The generative semantics of Prolog can be disabled by turning a goal into a  syntactic constraint (suspended goal). A syntactic constraint is resumed as  soon as relevant variables gets assigned. Syntactic constraints can be  manipulated by constraint handling rules (CHR).- Native support for backtracking. To ease implementation of search.- The constraint store is extensible.  The host application can declare  non-syntactic constraints and use custom constraint solvers to check their  consistency.- Clauses are graftable. The user is free to extend an existing program by  inserting/removing clauses, both at runtime (using implication) and at  \compilation\ time by accumulating files.ELPI is free software released under the terms of LGPL 2.1 or above.
    lifecycle: dependency
  - name: gmp-ecm.7.0.3
    source: https://gitlab.inria.fr/zimmerma/ecm" rel="nofollow
    license: https://spdx.org/licenses/GPL-3.0.html
    synopsis:  GMP-ECM library for the Elliptic Curve Method (ECM) for integer factorization
    description: >
      
    lifecycle: dependency
  - name: jane-street-headers.v0.16.0
    source: https://github.com/janestreet/jane-street-headers
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Jane Street C header files
    description: >
      C header files shared between the various Jane Street packages
    lifecycle: dependency
  - name: jsonrpc.1.22.0
    source: https://github.com/ocaml/ocaml-lsp
    license: https://spdx.org/licenses/ISC.html
    synopsis:  Jsonrpc protocol implemenation
    description: >
      See https://www.jsonrpc.org/specification
    lifecycle: dependency
  - name: jst-config.v0.16.0
    source: https://github.com/janestreet/jst-config
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Compile-time configuration for Jane Street libraries
    description: >
      Defines compile-time constants used in Jane Street libraries such as Base, Core, andAsync.This package has an unstable interface; it is intended only to share configuration betweendifferent packages from Jane Street. Future updates may not be backward-compatible, and wedo not recommend using this package directly.
    lifecycle: dependency
  - name: lablgtk3-sourceview3.3.1.5
    source: https://github.com/garrigue/lablgtk
    license: Unknown
    synopsis:  OCaml interface to GTK+ gtksourceview library
    description: >
      OCaml interface to GTK+3, gtksourceview3 library.See https://garrigue.github.io/lablgtk/ for more information.
    lifecycle: dependency
  - name: lablgtk3.3.1.5
    source: https://github.com/garrigue/lablgtk
    license: Unknown
    synopsis:  OCaml interface to GTK+3
    description: >
      OCaml interface to GTK+3See https://garrigue.github.io/lablgtk/ for more information.
    lifecycle: dependency
  - name: lsp.1.22.0
    source: https://github.com/ocaml/ocaml-lsp
    license: https://spdx.org/licenses/ISC.html
    synopsis:  LSP protocol implementation in OCaml
    description: >
      Implementation of the LSP protocol in OCaml. It is designed to be as portable aspossible and does not make any assumptions about IO.
    lifecycle: dependency
  - name: menhirCST.20240715
    source: http://gitlab.inria.fr/fpottier/menhir" rel="nofollow
    license: Unknown
    synopsis:  Runtime support library for parsers generated by Menhir
    description: >
      
    lifecycle: dependency
  - name: menhirLib.20240715
    source: http://gitlab.inria.fr/fpottier/menhir" rel="nofollow
    license: Unknown
    synopsis:  Runtime support library for parsers generated by Menhir
    description: >
      
    lifecycle: dependency
  - name: menhirSdk.20240715
    source: http://gitlab.inria.fr/fpottier/menhir" rel="nofollow
    license: Unknown
    synopsis:  Compile-time library for auxiliary tools related to Menhir
    description: >
      
    lifecycle: dependency
  - name: num.1.5-1
    source: https://github.com/ocaml/num/
    license: Unknown
    synopsis:  The legacy Num library for arbitrary-precision integer and rational arithmetic
    description: >
      
    lifecycle: dependency
  - name: ocaml-compiler-libs.v0.12.4
    source: https://github.com/janestreet/ocaml-compiler-libs
    license: https://spdx.org/licenses/MIT.html
    synopsis:  OCaml compiler libraries repackaged
    description: >
      This packages exposes the OCaml compiler libraries repackages underthe toplevel names Ocaml_common, Ocaml_bytecomp, Ocaml_optcomp, ...
    lifecycle: dependency
  - name: ocaml-config.2
    source: https://opam.ocaml.org/" rel="nofollow
    license: https://spdx.org/licenses/ISC.html
    synopsis:  OCaml Switch Configuration
    description: >
      This package is used by the OCaml package to set-up its variables.
    lifecycle: dependency
  - name: ocaml-option-flambda.1
    source: https://opam.ocaml.org" rel="nofollow
    license: Unknown
    synopsis:  Set OCaml to be compiled with flambda activated
    description: >
      
    lifecycle: dependency
  - name: ocaml-variants.4.14.2+options
    source: https://ocaml.org" rel="nofollow
    license: Unknown
    synopsis:  Official release of OCaml 4.14.2
    description: >
      
    lifecycle: dependency
  - name: ocaml.4.14.2
    source: https://ocaml.org" rel="nofollow
    license: Unknown
    synopsis:  The OCaml compiler (virtual package)
    description: >
      This package requires a matching implementation of OCaml,and polls it to initialise specific variables like `ocaml:native-dynlink`
    lifecycle: dependency
  - name: ocamlbuild.0.15.0
    source: https://github.com/ocaml/ocamlbuild/
    license: Unknown
    synopsis:  OCamlbuild is a build system with builtin rules to easily build most OCaml projects
    description: >
      
    lifecycle: dependency
  - name: ocamlfind.1.9.5~relocatable
    source: http://projects.camlcity.org/projects/findlib.html" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A library manager for OCaml
    description: >
      Findlib is a library manager for OCaml. It provides a convention howto store libraries, and a file format (\META\) to describe theproperties of libraries. There is also a tool (ocamlfind) forinterpreting the META files, so that it is very easy to use librariesin programs and scripts.
    lifecycle: dependency
  - name: ocamlgraph.2.1.0
    source: https://github.com/backtracking/ocamlgraph/
    license: https://spdx.org/licenses/LGPL-2.1-only.html
    synopsis:  A generic graph library for OCaml
    description: >
      Provides both graph data structures and graph algorithms
    lifecycle: dependency
  - name: octavius.1.2.2
    source: https://github.com/ocaml-doc/octavius
    license: https://spdx.org/licenses/ISC.html
    synopsis:  Ocamldoc comment syntax parser
    description: >
      Octavius is a library to parse the `ocamldoc` comment syntax.
    lifecycle: dependency
  - name: parsexp.v0.16.0
    source: https://github.com/janestreet/parsexp
    license: https://spdx.org/licenses/MIT.html
    synopsis:  S-expression parsing library
    description: >
      This library provides generic parsers for parsing S-expressions fromstrings or other medium.The library is focused on performances but still provide full genericparsers that can be used with strings, bigstrings, lexing buffers,character streams or any other sources effortlessly.It provides three different class of parsers:- the normal parsers, producing [Sexp.t] or [Sexp.t list] values- the parsers with positions, building compact position sequences so  that one can recover original positions in order to report properly  located errors at little cost- the Concrete Syntax Tree parsers, produce values of type  [Parsexp.Cst.t] which record the concrete layout of the s-expression  syntax, including commentsThis library is portable and doesn'apos;t provide IO functions. To reads-expressions from files or other external sources, you should useparsexp_io.
    lifecycle: dependency
  - name: ppx_assert.v0.16.0
    source: https://github.com/janestreet/ppx_assert
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Assert-like extension nodes that raise useful errors on failure
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_base.v0.16.0
    source: https://github.com/janestreet/ppx_base
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Base set of ppx rewriters
    description: >
      ppx_base is the set of ppx rewriters used for Base.Note that Base doesn'apos;t need ppx to build, it is only used as averification tool.
    lifecycle: dependency
  - name: ppx_cold.v0.16.0
    source: https://github.com/janestreet/ppx_cold
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Expands [@cold] into [@inline never][@specialise never][@local never]
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_compare.v0.16.0
    source: https://github.com/janestreet/ppx_compare
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Generation of comparison functions from types
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_derivers.1.2.1
    source: https://github.com/ocaml-ppx/ppx_derivers
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  Shared [@@deriving] plugin registry
    description: >
      Ppx_derivers is a tiny package whose sole purpose is to allowppx_deriving and ppx_type_conv to inter-operate gracefully when linkedas part of the same ocaml-migrate-parsetree driver.
    lifecycle: dependency
  - name: ppx_deriving.6.0.3
    source: https://github.com/ocaml-ppx/ppx_deriving
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Type-driven code generation for OCaml
    description: >
      ppx_deriving provides common infrastructure for generatingcode based on type definitions, and a set of useful pluginsfor common tasks.
    lifecycle: dependency
  - name: ppx_deriving_yojson.3.9.1
    source: https://github.com/ocaml-ppx/ppx_deriving_yojson
    license: https://spdx.org/licenses/MIT.html
    synopsis:  JSON codec generator for OCaml
    description: >
      ppx_deriving_yojson is a ppx_deriving plugin that providesa JSON codec generator.
    lifecycle: dependency
  - name: ppx_enumerate.v0.16.0
    source: https://github.com/janestreet/ppx_enumerate
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Generate a list containing all values of a finite type
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_globalize.v0.16.0
    source: https://github.com/janestreet/ppx_globalize
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A ppx rewriter that generates functions to copy local values to the global heap
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_hash.v0.16.0
    source: https://github.com/janestreet/ppx_hash
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A ppx rewriter that generates hash functions from type expressions and definitions
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_here.v0.16.0
    source: https://github.com/janestreet/ppx_here
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Expands [%here] into its location
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_import.1.11.0
    source: https://github.com/ocaml-ppx/ppx_import
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A syntax extension for importing declarations from interface files
    description: >
      
    lifecycle: dependency
  - name: ppx_inline_test.v0.16.1
    source: https://github.com/janestreet/ppx_inline_test
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Syntax extension for writing in-line tests in ocaml code
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_js_style.v0.16.0
    source: https://github.com/janestreet/ppx_js_style
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Code style checker for Jane Street Packages
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.This packages is a no-op ppx rewriter. It is used as a 'apos;lint'apos; tool toenforce some coding conventions across all Jane Street packages.
    lifecycle: dependency
  - name: ppx_optcomp.v0.16.0
    source: https://github.com/janestreet/ppx_optcomp
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Optional compilation for OCaml
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_sexp_conv.v0.16.0
    source: https://github.com/janestreet/ppx_sexp_conv
    license: https://spdx.org/licenses/MIT.html
    synopsis:  [@@deriving] plugin to generate S-expression conversion functions
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_yojson_conv.v0.16.0
    source: https://github.com/janestreet/ppx_yojson_conv
    license: https://spdx.org/licenses/MIT.html
    synopsis:  [@@deriving] plugin to generate Yojson conversion functions
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppx_yojson_conv_lib.v0.16.0
    source: https://github.com/janestreet/ppx_yojson_conv_lib
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Runtime lib for ppx_yojson_conv
    description: >
      Part of the Jane Street'apos;s PPX rewriters collection.
    lifecycle: dependency
  - name: ppxlib.0.34.0
    source: https://github.com/ocaml-ppx/ppxlib
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Standard infrastructure for ppx rewriters
    description: >
      Ppxlib is the standard infrastructure for ppx rewritersand other programs that manipulate the in-memory representation ofOCaml programs, a.k.a the \Parsetree\.It also comes bundled with two ppx rewriters that are commonly used towrite tools that manipulate and/or generate Parsetree values;`ppxlib.metaquot` which allows to construct Parsetree values using theOCaml syntax directly and `ppxlib.traverse` which provides variousways of automatically traversing values of a given type, in particularallowing to inject a complex structured value into generated code.
    lifecycle: dependency
  - name: re.1.12.0
    source: https://github.com/ocaml/ocaml-re
    license: Unknown
    synopsis:  RE is a regular expression library for OCaml
    description: >
      Pure OCaml regular expressions with:* Perl-style regular expressions (module Re.Perl)* Posix extended regular expressions (module Re.Posix)* Emacs-style regular expressions (module Re.Emacs)* Shell-style file globbing (module Re.Glob)* Compatibility layer for OCaml'apos;s built-in Str module (module Re.Str)
    lifecycle: dependency
  - name: result.1.5
    source: https://github.com/janestreet/result
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  Compatibility Result module
    description: >
      Projects that want to use the new result type defined in OCaml &gt;gt;= 4.03while staying compatible with older version of OCaml should use theResult module defined in this library.
    lifecycle: dependency
  - name: sel.0.5.0
    source: https://github.com/gares/sel
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Simple Event Library
    description: >
      This library is the result of our experience in using threads and the Lwt async monad to tame the problem of writing a server which has to listen and react to multiple sources of events. The library itself is just sugar atop Unix.select. You can read more about the library on https://github.com/gares/sel
    lifecycle: dependency
  - name: seq.base
    source: /rocq-prover/platform/blob/2025.01.0/doc
    license: Unknown
    synopsis:  Compatibility package for OCaml'apos;s standard iterator type starting from 4.07.
    description: >
      
    lifecycle: dependency
  - name: sexplib0.v0.16.0
    source: https://github.com/janestreet/sexplib0
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Library containing the definition of S-expressions and some base converters
    description: >
      Part of Jane Street'apos;s Core libraryThe Core suite of libraries is an industrial strength alternative toOCaml'apos;s standard library that was developed by Jane Street, thelargest industrial user of OCaml.
    lifecycle: dependency
  - name: stdio.v0.16.0
    source: https://github.com/janestreet/stdio
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Standard IO library for OCaml
    description: >
      Stdio implements simple input/output functionalities for OCaml.It re-exports the input/output functions of the OCaml standardlibraries using a more consistent API.
    lifecycle: dependency
  - name: stdlib-shims.0.3.0
    source: https://github.com/ocaml/stdlib-shims
    license: Unknown
    synopsis:  Backport some of the new stdlib features to older compiler
    description: >
      Backport some of the new stdlib features to older compiler,such as the Stdlib module.This allows projects that require compatibility with older compiler touse these new features in their code.
    lifecycle: dependency
  - name: time_now.v0.16.0
    source: https://github.com/janestreet/time_now
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Reports the current time
    description: >
      Provides a single function to report the current time in nanosecondssince the start of the Unix epoch.
    lifecycle: dependency
  - name: topkg.1.0.7
    source: https://erratique.ch/software/topkg" rel="nofollow
    license: https://spdx.org/licenses/ISC.html
    synopsis:  The transitory OCaml software packager
    description: >
      Topkg is a packager for distributing OCaml software. It provides anAPI to describe the files a package installs in a given buildconfiguration and to specify information about the package'apos;sdistribution, creation and publication procedures.The optional topkg-care package provides the `topkg` command line toolwhich helps with various aspects of a package'apos;s life cycle: creatingand linting a distribution, releasing it on the WWW, publish itsdocumentation, add it to the OCaml opam repository, etc.Topkg is distributed under the ISC license and has **no**dependencies. This is what your packages will need as a *build*dependency.Topkg-care is distributed under the ISC license it depends on[fmt][fmt], [logs][logs], [bos][bos], [cmdliner][cmdliner],[webbrowser][webbrowser] and `opam-format`.[fmt]: http://erratique.ch/software/fmt[logs]: http://erratique.ch/software/logs[bos]: http://erratique.ch/software/bos[cmdliner]: http://erratique.ch/software/cmdliner[webbrowser]: http://erratique.ch/software/webbrowserHome page: http://erratique.ch/software/topkg
    lifecycle: dependency
  - name: uutf.1.0.3
    source: https://erratique.ch/software/uutf" rel="nofollow
    license: https://spdx.org/licenses/ISC.html
    synopsis:  Non-blocking streaming Unicode codec for OCaml
    description: >
      Uutf is a non-blocking streaming codec to decode and encode the UTF-8,UTF-16, UTF-16LE and UTF-16BE encoding schemes. It can efficientlywork character by character without blocking on IO. Decoders performcharacter position tracking and support newline normalization.Functions are also provided to fold over the characters of UTF encodedOCaml string values and to directly encode characters in OCamlBuffer.t values. **Note** that since OCaml 4.14, that functionalitycan be found in the Stdlib and you are encouraged to migrate to it.Uutf has no dependency and is distributed under the ISC license.Home page: http://erratique.ch/software/uutf  Contact: Daniel BÃ¼nzli `gt;`
    lifecycle: dependency
  - name: yojson.2.2.2
    source: https://github.com/ocaml-community/yojson
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  Yojson is an optimized parsing and printing library for the JSON format
    description: >
      Yojson is an optimized parsing and printing library for the JSON format.ydump is a pretty-printing command-line program provided with theyojson package.
    lifecycle: dependency
  - name: z3.4.13.0-3
    source: https://github.com/Z3prover/z3
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Z3 solver
    description: >
      
    lifecycle: dependency
  - name: zarith.1.14
    source: https://github.com/ocaml/Zarith
    license: Unknown
    synopsis:  Implements arithmetic and logical operations over arbitrary-precision integers
    description: >
      The Zarith library implements arithmetic and logical operations overarbitrary-precision integers. It uses GMP to efficiently implementarithmetic over big integers. Small integers are represented as Camlunboxed integers, for speed and space economy.
    lifecycle: dependency
