  - name: coq-bedrock2-compiler.0.0.8
    source: https://github.com/mit-plv/bedrock2
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A work-in-progress language and compiler for verified low-level programming (compiler part)
    description: >
      bedrock2 is a low-level systems programming language. This language isequipped with a simple program logic for proving correctness of theprograms.  This package includes a verified compiler targeting RISC-Vfrom this language.The project has similar goals as bedrock, but uses a different design.No code is shared between bedrock and bedrock2.
    lifecycle: extended
  - name: coq-bedrock2.0.0.8
    source: https://github.com/mit-plv/bedrock2
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A work-in-progress language and compiler for verified low-level programming
    description: >
      bedrock2 is a low-level systems programming language. This language isequipped with a simple program logic for proving correctness of theprograms.  A verified compiler targeting RISC-V from this languageexists in the coq-bedrock2-compiler package on opam.The project has similar goals as bedrock, but uses a different design.No code is shared between bedrock and bedrock2.
    lifecycle: extended
  - name: coq-coqutil.0.0.6
    source: https://github.com/mit-plv/coqutil
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Coq library for tactics, basic definitions, sets, maps
    description: >
      ### coqutil -- Various Coq UtilitiesContents:* [Datatypes](https://github.com/mit-plv/coqutil/tree/master/src/coqutil/Datatypes): Some utilities for existing datatypes, and new datatypes.* [Decidable](https://github.com/mit-plv/coqutil/blob/master/src/coqutil/Decidable.v): `BoolSpec`-based decidability typeclasses. Allows one to write `if MyType_eqb a b then ... else ...` where `MyType_eqb a b` returns a `bool`, instead of writing `if MyType_eq_dec a b then ... else ...` where `MyType_eq_dec a b` returns a `sumbool`, while still getting `a = b` and `a gt; b` as hypotheses (as opposed to `MyType_eqb a b = true` and `MyType_eqb a b = false`) after destructing the `if` (need to use [`destr`](https://github.com/mit-plv/coqutil/blob/master/src/coqutil/Tactics/destr.v) instead of `destruct`). So one gets the benefits of `Sumbool` without getting its disadvantage of having to carry around proof terms, which can cause a blow-up under reduction if one is not careful.* [Map](https://github.com/mit-plv/coqutil/tree/master/src/coqutil/Map): A typeclass based map library allowing one to abstract over the concrete implementation of maps. The implementations have to be extensional, which excludes certain efficient implementations, but simplifies proofs, because one can `replace mapA with mapB` if one can prove that `mapA` and `mapB` have the same contents. Comes with a [solver](https://github.com/mit-plv/coqutil/blob/master/src/coqutil/Map/Solver.v) which works reasonably fast on most map goals we have encountered so far.* [Tactics](https://github.com/mit-plv/coqutil/tree/master/src/coqutil/Tactics): A collection of useful general-purpose tactics.* [Word](https://github.com/mit-plv/coqutil/tree/master/src/coqutil/Word): Fixed width words for any width, in the same typeclass based style as the map library. Designed for the case where all words have the same (potentially abstract) bit width. Therefore, it does not provide functions to concatenate and split words, which is better addressed by [bbv](https://github.com/mit-plv/bbv/).* [Z](https://github.com/mit-plv/coqutil/tree/master/src/coqutil/Z): Utilities to work with the `Z` type from Coq'apos;s standard library, including a tactic to prove `Z` equalities by splitting the equality into equalities on bit index ranges, a tactic to make `lia` capable of reasoning about goals with division and modulo, and a tactic to simplify expressions containing nested occurrences of `mod`, and more misc utilities.* Various macros, notations, and desirable default settings.Each feature is intended to be as minimal and as independent of the other features as possible, so that users can pick just what they need.
    lifecycle: extended
  - name: coq-deriving.0.2.1
    source: https://github.com/arthuraa/deriving
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Generic instances of MathComp classes
    description: >
      Deriving provides generic instances of MathComp classes forinductive data types.  It includes native support for eqType,choiceType, countType and finType instances, and it allows users todefine their own instances for other classes.
    lifecycle: extended
  - name: coq-extructures.0.5.0
    source: https://github.com/arthuraa/extructures
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Finite sets, maps, and other data structures with extensional reasoning
    description: >
      
    lifecycle: extended
  - name: coq-fiat-crypto.0.1.3
    source: https://github.com/mit-plv/fiat-crypto
    license: Unknown
    synopsis:  Cryptographic Primitive Code Generation by Fiat
    description: >
      Coq code and proofs for a command-line binary that can synthesize proven-correctbig-integer modular field arithmetic operations for cryptography.Target languages include C, Rust, Zig, Go, and bedrock2.
    lifecycle: extended
  - name: coq-metacoq.1.3.2+8.20
    source: https://metarocq.github.io" rel="nofollow
    license: https://spdx.org/licenses/MIT.html
    synopsis:  A meta-programming framework for Coq
    description: >
      MetaCoq is a meta-programming framework for Coq.The meta-package includes the template-coq library,the PCUIC development including a verified equivalence between Coq and PCUIC,a safe type checker and verified erasure for PCUIC and example translations.See individual packages for more detailed descriptions.
    lifecycle: extended
  - name: coq-record-update.0.3.4
    source: https://github.com/tchajed/coq-record-update
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Generic support for updating record fields in Coq
    description: >
      While Coq provides projections for each field of a record, it has noconvenient way to update a single field of a record. This library provides ageneric way to update a field by name, where the user only has to implement asimple typeclass that lists out the record fields.
    lifecycle: extended
  - name: coq-reduction-effects.0.1.5
    source: https://github.com/coq-community/reduction-effects
    license: https://spdx.org/licenses/MPL-2.0.html
    synopsis:  A Coq plugin to add reduction side effects to some Coq reduction strategies
    description: >
      
    lifecycle: extended
  - name: coq-rewriter.0.0.12
    source: https://github.com/mit-plv/rewriter
    license: Unknown
    synopsis:  Reflective PHOAS rewriting/pattern-matching-compilation framework for simply-typed equalities and let-lifting, experimental and tailored for use in Fiat Cryptography
    description: >
      
    lifecycle: extended
  - name: coq-riscv.0.0.5
    source: https://github.com/mit-plv/riscv-coq
    license: https://spdx.org/licenses/BSD-3-Clause.html
    synopsis:  RISC-V Specification in Coq, somewhat experimental
    description: >
      
    lifecycle: extended
  - name: coq-rupicola.0.0.10
    source: https://github.com/mit-plv/rupicola
    license: https://spdx.org/licenses/MIT.html
    synopsis:  Gallina to imperative code compilation, currently in design phase
    description: >
      
    lifecycle: extended
  - name: coq-serapi.8.20.0+0.20.0
    source: https://github.com/ejgallego/coq-serapi
    license: https://spdx.org/licenses/LGPL-2.1-or-later.html
    synopsis:  Serialization library and protocol for machine interaction with the Coq proof assistant
    description: >
      SerAPI is a library for machine-to-machine interaction with theCoq proof assistant, with particular emphasis on applications in IDEs,code analysis tools, and machine learning. SerAPI provides automaticserialization of Coq'apos;s internal OCaml datatypes from/to JSON orS-expressions (sexps).
    lifecycle: extended
